# Latin square üå∂Ô∏è
# A Latin square of order n is a square matrix of size n√ón, each row and each column of which contains all the numbers from 1 to n. 
# Write a program that checks whether a given square matrix is a Latin square.

# –õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
# –õ–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ n –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º n√ón, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫–æ—Ç–æ—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n. 
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.

def provst(n, matrix):
    for i in range(n):
        m = [i for i in range(1,n+1)]
        for j in range(n):
            if matrix[j][i] not in m: return False
            m.remove(m[m.index(matrix[j][i])])
    if m == []: return True
    
    
    
def provs(n, matrix):
    for i in range(n):
        m = [i for i in range(1,n+1)]
        for j in range(n):
            if matrix[i][j] not in m: return False
            m.remove(m[m.index(matrix[i][j])])
    if m == []: return True
    
n = int(input())
matrix = [[int(i) for i in input().split()] for _ in range(n)]

if provs(n, matrix) == False: print('NO')
else: 
    if provst(n, matrix) == False: print('NO')
    else: print('YES')

# Sample Input 1:
# 4
# 2 3 4 1
# 3 4 1 2
# 4 1 2 3
# 1 2 3 4
# Sample Output 1:
# YES
# Sample Input 2:
# 3
# 1 2 3
# 3 2 1
# 2 3 4
# Sample Output 2:
# NO
