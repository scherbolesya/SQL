# Dictionary Methods
# методы словарей

info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher'}
info['name'] = 'Timur'                  # изменяем значение по ключу name
info['email'] = 'timyr-guev@yandex.ru'  # добавляем в словарь элемент с ключом email
print(info)

{'name': 'Timur', 'age': 28, 'job': 'Teacher', 'email': 'timyr-guev@yandex.ru'}

-----------------------------------------------------------------------------------
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}

item1 = info.get('salary')
item2 = info.get('salary', 'Информации о зарплате нет')
print(item1)
print(item2)

None
Информации о зарплате нет

-----------------------------------------------------------------------------------
# Метод update() реализует своеобразную операцию конкатенации для словарей. 
# Он объединяет ключи и значения одного словаря с ключами и значениями другого. При совпадении ключей в итоге сохранится значение словаря, указанного в качестве аргумента метода update().
info1 = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
info2 = {'age': 30,
        'city': 'New York',
        'email': 'bob@web.com'}
info1.update(info2)
print(info1)

{'name': 'Bob', 'age': 30, 'job': 'Dev', 'city': 'New York', 'email': 'bob@web.com'}

------------------------------------------------------------------------------------
info1 = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
info2 = {'age': 30,
        'city': 'New York',
        'email': 'bob@web.com'}
info1 |= info2
print(info1)

{'name': 'Bob', 'age': 30, 'job': 'Dev', 'city': 'New York', 'email': 'bob@web.com'}

------------------------------------------------------------------------------------
# Метод setdefault() позволяет получить значение из словаря по заданному ключу, автоматически добавляя элемент словаря, если он отсутствует.
# Метод принимает два аргумента:
# key: ключ, значение по которому следует получить, если таковое имеется в словаре, либо создать.
# default: значение, которое будет использовано при добавлении нового элемента в словарь.
# В зависимости от значений параметров key и default возможны следующие сценарии работы данного метода.
# Сценарий 1. Если ключ key присутствует в словаре, то метод возвращает значение по заданному ключу (независимо от того, передан параметр default или нет).
info = {'name': 'Bob',
        'age': 25}
name1 = info.setdefault('name')           # параметр default не задан           
name2 = info.setdefault('name', 'Max')    # параметр default задан
print(name1)
print(name2)

Bob
Bob

-------------------------------------------------------------------------------------
# Сценарий 2. Если ключ key отсутствует в словаре, то метод вставляет переданное значение default по заданному ключу.
info = {'name': 'Bob',
        'age': 25}
job = info.setdefault('job', 'Dev')
print(info)
print(job)

{'name': 'Bob', 'age': 25, 'job': 'Dev'}
Dev
# При этом если значение default не передано в метод, то вставится значение None.
--------------------------------------------------------------------------------------
info = {'name': 'Bob',
        'age': 25}
job = info.setdefault('job')
print(info)
print(job)

{'name': 'Bob', 'age': 25, 'job': None}
None

--------------------------------------------------------------------------------------
# Удаление элементов из словаря
# Существует несколько способов удаления элементов из словаря:
# оператор del;
# метод pop();
# метод popitem();
# метод clear().

# С помощью оператора del можно удалять элементы словаря по определенному ключу.
info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher',
        'email': 'timyr-guev@yandex.ru'}
del info['email']    # удаляем элемент имеющий ключ email
del info['job']      # удаляем элемент имеющий ключ job
print(info)

{'name': 'Sam', 'age': 28}

---------------------------------------------------------------------------------------
# Метод pop()
# Оператор del удаляет из словаря элемент по заданному ключу вместе с его значением. Если требуется получить само значение удаляемого элемента, то нужен метод pop().
info = {'name': 'Sam',
        'age': 28,
        'job': 'Teacher',
        'email': 'timyr-guev@yandex.ru'}
email = info.pop('email')          # удаляем элемент по ключу email, возвращая его значение
job = info.pop('job')              # удаляем элемент по ключу job, возвращая его значение
print(email)
print(job)
print(info)

timyr-guev@yandex.ru
Teacher
{'name': 'Sam', 'age': 28}

# Единственное отличие этого способа удаления от оператора del — он возвращает удаленное значение. 
# В остальном этот способ идентичен оператору del. В частности, если удаляемого ключа в словаре нет, возникнет ошибка KeyError.
# ​Чтобы ошибка не появлялась, этому методу можно передать второй аргумент. Он будет возвращен, если указанного ключа в словаре нет. 
# Это позволяет реализовать безопасное удаление элемента из словаря:
surname = info.pop('surname', None) 
# Если ключа surname в словаре нет, то в переменной surname будет храниться значение None.
-----------------------------------------------------------------------------------------
# Метод popitem()
# Метод popitem() удаляет из словаря последний добавленный элемент и возвращает удаляемый элемент в виде кортежа (ключ, значение).
info = {'name': 'Bob',
     'age': 25,
     'job': 'Dev'}
info['surname'] = 'Sinclar'
item = info.popitem()
print(item)
print(info)

('surname', 'Sinclar')
{'name': 'Bob', 'age': 25, 'job': 'Dev'}

------------------------------------------------------------------------------------------
# Метод clear()
# Метод clear() удаляет все элементы из словаря.
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
info.clear()
print(info)

{}

------------------------------------------------------------------------------------------
# Метод copy()
# Метод copy() создает поверхностную копию словаря.
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
info_copy = info.copy()
print(info_copy)

{'name': 'Bob', 'age': 25, 'job': 'Dev'}

-------------------------------------------------------------------------------------------
# Не стоит путать копирование словаря (метод copy()) и присвоение новой переменной ссылки на старый словарь.
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
new_info = info
new_info['name'] = 'Tim'
print(info)

{'name': 'Tim', 'age': 25, 'job': 'Dev'}

-------------------------------------------------------------------------------------------
# Оператор присваивания (=) не копирует словарь, а лишь присваивает ссылку на старый словарь новой переменной.
# Таким образом, когда мы изменяем словарь new_info, меняется и словарь info. Если необходимо изменить один словарь, не изменяя второй, используют метод copy().
info = {'name': 'Bob',
        'age': 25,
        'job': 'Dev'}
new_info = info.copy()
new_info['name'] = 'Tim'
print(info)
print(new_info)

{'name': 'Bob', 'age': 25, 'job': 'Dev'}
{'name': 'Tim', 'age': 25, 'job': 'Dev'}

--------------------------------------------------------------------------------------------
# Примечание 1. Словарь можно использовать вместо нескольких вложенных условий, если вам нужно проверить число на равенство. Например, вместо 
num = int(input())
if num == 1:
    description = 'One'
elif num == 2:
    description = 'Two'
elif num == 3:
    description = 'Three'
else:
    description = 'Unknown'
print(description)

# можно написать
num = int(input())
description = {1: 'One', 2: 'Two', 3: 'Three'}
print(description.get(num, 'Unknown'))
# На практике такой код встречается достаточно часто, особенно если в программе необходимо часто осуществлять проверку указанного типа.

---------------------------------------------------------------------------------------------
# Примечание 2. Методы .get() и .setdefault() в Python используются для работы со словарями, но они выполняют разные функции.
# .get(key, default):
# возвращает значение default, если ключ отсутствует в словаре (по умолчанию None, если default не указан);
# не изменяет сам словарь.
Пример:
my_dict = {'a': 1, 'b': 2}
value = my_dict.get('a', 0)  # Получаем значение по ключу 'a', если ключ отсутствует, возвращаем 0
.setdefault(key, default):
# если ключ отсутствует в словаре, вставляет новую пару ключ-значение с ключом key и значением default в словарь, затем возвращает default.
Пример:
my_dict = {'a': 1, 'b': 2}
value = my_dict.setdefault('c', 0)  # Получаем значение по ключу 'c', если ключ отсутствует, вставляем 'c': 0
Важное отличие: .get() только получает значение, не меняя словарь, в то время как .setdefault() может изменить словарь, если ключ отсутствует.
