# Перебор элементов словаря
# Looping through dictionary elements

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for key in capitals:
    print(key)
# Россия
# Франция
# Чехия

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for key in capitals:
    print(capitals[key])
# Москва
# Париж
# Прага

capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for key in capitals:
    print("Столица", key, "- это", capitals[key])
# Столица Россия - это Москва
# Столица Франция - это Париж
# Столица Чехия - это Прага

# Словарный метод keys() возвращает список ключей всех элементов словаря.
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for key in capitals.keys():  # итерируем по списку ["Россия", "Франция", "Чехия"]
    print(key)
# Россия
# Франция
# Чехия

# Словарный метод values() возвращает список значений всех элементов словаря.
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for value in capitals.values():  # итерируем по списку ["Москва", "Париж", "Прага"]
    print(value)
# Москва
# Париж
# Прага

# Словарный метод items() возвращает список всех элементов словаря, состоящий из кортежей пар (ключ, значение).
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for item in capitals.items():
    print(item)
# ("Россия", "Москва")
# ("Франция", "Париж")
# ("Чехия", "Прага")

# Используя магию распаковки кортежей, можно писать такой код:
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
for key, value in capitals.items():
    print(key, "-", value)
# Россия - Москва
# Франция - Париж
# Чехия - Прага

# Если требуется вывести только ключи словаря, то мы так же можем использовать операцию распаковки словаря.
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
print(*capitals, sep="\n")
# Россия
# Франция
# Чехия

# Сортировка по ключам выполняется с использованием функции sorted().
capitals = {
    "Россия": "Москва",
    "Англия": "Лондон",
    "Чехия": "Прага",
    "Бразилия": "Бразилиа",
}
for key in sorted(capitals):
    print(key)
# Англия
# Бразилия
# Россия
# Чехия

# Обратите внимание: функция sorted() возвращает отсортированный список ключей, а не словарь. Не путайте встроенную функцию sorted() и списочный метод sort(). Словари не содержат метода sort().
# Для сортировки словаря по значениям можно использовать функцию sorted() вместе с методом items().
capitals = {
    "Россия": "Москва",
    "Англия": "Лондон",
    "Чехия": "Прага",
    "Бразилия": "Бразилиа",
}
for key, value in sorted(capitals.items(), key=lambda x: x[1]):
    print(value)
# Бразилиа
# Лондон
# Москва
# Прага
# Стоит учитывать, что sorted(capitals.items(), key=lambda x: x[1]) возвращает не словарь, а отсортированный по значениям список кортежей.
# При сортировке словаря по значениям мы используем анонимную функцию lambda x: x[1], о ней будет рассказано в следующих уроках.

# Проверка наличия ключа в словаре:
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
if "Россия" in capitals:
    print("В словаре есть ключ Россия")

# Проверка наличия значения в словаре:
capitals = {"Россия": "Москва", "Франция": "Париж", "Чехия": "Прага"}
if "Париж" in capitals.values():
    print("В словаре есть значение Париж")

Примечание 2. Встроенная функция sorted() имеет опциональный параметр reverse. Если установить этому параметру значение True, то сортировка будет по убыванию.

Примечание 3. Код для работы со словарями нужно писать таким образом, чтобы он правильно работал при любом порядке обхода с помощью цикла for.

Примечание 4. Словарные методы items(), keys(), values() возвращают не совсем обычные списки. Типы этих списков -  dict_items, dict_keys, 
dict_values соответственно, в отличие от обычных списков  list. Методы обычных списков недоступны для списков типа dict_items, dict_keys, 
dict_values. Используйте явное преобразование с помощью функции list() для получения доступа к методам списков.
